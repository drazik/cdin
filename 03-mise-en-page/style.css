.grid {
  /* Étape 2 : on utilise flexbox pour afficher nos grids */
  display: flex;

  /* Étape 4 : on fait en sorte que les éléments qui dépassent du container passent à la ligne */
  flex-wrap: wrap;
}

.grid__item {
  /* Étape 3 : on empêche les items de rétrécir et de grossir automatiquement */
  flex-shrink: 0;
  flex-grow: 0;
}

.grid__item--1-2 {
  /* Étape 3 : On affecte une largeur de 50% à la variante 1/2 des items */
  flex-basis: 50%;
}

/* Étape 5 : variantes 100%, 1/3, 2/3 et 1/4 des items */
.grid__item--1-1 {
  flex-basis: 100%;
}

.grid__item--1-3 {
  flex-basis: calc(100% / 3);
}

.grid__item--2-3 {
  flex-basis: calc(2 * 100% / 3);
}

.grid__item--1-4 {
  flex-basis: 25%;
}

/* Étape 6 : ajout de gouttières */
.grid--gutters {
  margin: 0 -16px;
}

.grid--gutters .grid__item {
  padding: 0 16px;
  box-sizing: border-box;
}

body {
  overflow: hidden;
}

/*
 * Le but de ces règles CSS est d'appliquer une couleur de fond sur le contenu des items de chaque grille
 * Dans le cas de la grille avec gouttière, on a besoin d'un élément supplémentaire (ici une div) pour
 * délimiter le contenu, puisque les items ont un padding, que le background-color couvre, nous empêchant
 * de délimiter le contenu sans cet élément supplémentaire
 */
.grid:not(.grid--gutters) .grid__item:nth-child(even),
.grid--gutters .grid__item:nth-child(even) > div {
  background-color: #2ecc71;
}

.grid:not(.grid--gutters) .grid__item:nth-child(odd),
.grid--gutters .grid__item:nth-child(odd) > div {
  background-color: #3498db;
}
